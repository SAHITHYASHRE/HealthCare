DROP DATABASE IF EXISTS healthcare_db;
CREATE DATABASE healthcare_db;
USE healthcare_db;

CREATE TABLE Patient (
    patient_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    age INT CHECK (age > 0),
    gender ENUM('Male', 'Female', 'Other'),
    contact_number VARCHAR(20) UNIQUE,
    address VARCHAR(255)
);

CREATE TABLE Doctor (
    doctor_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    specialization VARCHAR(100),
    email VARCHAR(100) UNIQUE
);

CREATE TABLE Appointment (
    appointment_id INT PRIMARY KEY AUTO_INCREMENT,
    patient_id INT,
    doctor_id INT,
    appointment_date DATE NOT NULL,
    time_slot VARCHAR(20),
    status VARCHAR(20) DEFAULT 'Pending',
    FOREIGN KEY (patient_id) REFERENCES Patient(patient_id) ON DELETE CASCADE,
    FOREIGN KEY (doctor_id) REFERENCES Doctor(doctor_id) ON DELETE CASCADE
);

CREATE TABLE Feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT,
    appointment_id INT,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comments TEXT,
    FOREIGN KEY (appointment_id) REFERENCES Appointment(appointment_id) ON DELETE CASCADE
);

INSERT INTO Patient (name, age, gender, contact_number, address) VALUES
('Aarav Mehta', 28, 'Male', '9876543210', 'Mumbai, India'),
('Riya Sharma', 34, 'Female', '9123456780', 'Delhi, India'),
('Karan Patel', 42, 'Male', '9998887776', 'Ahmedabad, India');

INSERT INTO Doctor (name, specialization, email) VALUES
('Dr. Priya Singh', 'Cardiologist', 'priya.singh@hospital.com'),
('Dr. Arjun Desai', 'Dermatologist', 'arjun.desai@hospital.com'),
('Dr. Neha Verma', 'General Physician', 'neha.verma@hospital.com');

INSERT INTO Appointment (patient_id, doctor_id, appointment_date, time_slot, status) VALUES
(1, 1, '2025-06-17', '10:00 AM - 10:30 AM', 'Confirmed'),
(2, 2, '2025-06-18', '11:00 AM - 11:30 AM', 'Pending'),
(3, 3, '2025-06-19', '09:30 AM - 10:00 AM', 'Confirmed');

INSERT INTO Feedback (appointment_id, rating, comments) VALUES
(1, 5, 'Excellent diagnosis and very friendly doctor.'),
(2, 4, 'Good consultation but had to wait.'),
(3, 5, 'Very professional and helpful.');

-- View: Confirmed Appointments with patient and doctor names
CREATE VIEW ConfirmedAppointments AS
SELECT 
    a.appointment_id,
    p.name AS patient_name,
    d.name AS doctor_name,
    a.appointment_date,
    a.time_slot
FROM Appointment a
JOIN Patient p ON a.patient_id = p.patient_id
JOIN Doctor d ON a.doctor_id = d.doctor_id
WHERE a.status = 'Confirmed';

-- Indexes
CREATE INDEX idx_appointment_date ON Appointment(appointment_date);
CREATE INDEX idx_patient_name ON Patient(name);

-- Subquery: Doctors who received only 5-star feedback
SELECT name FROM Doctor
WHERE doctor_id IN (
    SELECT d.doctor_id
    FROM Feedback f
    JOIN Appointment a ON f.appointment_id = a.appointment_id
    JOIN Doctor d ON a.doctor_id = d.doctor_id
    GROUP BY d.doctor_id
    HAVING MIN(f.rating) = 5 AND MAX(f.rating) = 5
);

-- DQL with JOINs
SELECT 
    a.appointment_id,
    p.name AS patient_name,
    d.name AS doctor_name,
    a.appointment_date,
    a.time_slot,
    a.status
FROM Appointment a
JOIN Patient p ON a.patient_id = p.patient_id
JOIN Doctor d ON a.doctor_id = d.doctor_id;

SELECT 
    f.feedback_id,
    p.name AS patient_name,
    d.name AS doctor_name,
    f.rating,
    f.comments
FROM Feedback f
JOIN Appointment a ON f.appointment_id = a.appointment_id
JOIN Patient p ON a.patient_id = p.patient_id
JOIN Doctor d ON a.doctor_id = d.doctor_id;

-- Filtered view: Appointments on a specific date
SELECT 
    a.appointment_id,
    p.name AS patient,
    d.name AS doctor,
    a.time_slot,
    a.status
FROM Appointment a
JOIN Patient p ON a.patient_id = p.patient_id
JOIN Doctor d ON a.doctor_id = d.doctor_id
WHERE a.appointment_date = '2025-06-17';

-- Aggregation: Feedback summary per doctor
SELECT 
    d.name AS doctor_name,
    COUNT(f.feedback_id) AS total_feedbacks,
    AVG(f.rating) AS average_rating
FROM Feedback f
JOIN Appointment a ON f.appointment_id = a.appointment_id
JOIN Doctor d ON a.doctor_id = d.doctor_id
GROUP BY d.doctor_id;

-- DQL: Pending appointments
SELECT 
    a.appointment_id,
    p.name AS patient,
    d.name AS doctor,
    a.appointment_date,
    a.time_slot
FROM Appointment a
JOIN Patient p ON a.patient_id = p.patient_id
JOIN Doctor d ON a.doctor_id = d.doctor_id
WHERE a.status = 'Pending';

-- TCL: Transaction with rollback (simulated)
START TRANSACTION;

-- Try to insert a new appointment
INSERT INTO Appointment (patient_id, doctor_id, appointment_date, time_slot, status)
VALUES (1, 1, '2025-06-20', '12:00 PM - 12:30 PM', 'Confirmed');

-- Force a duplicate entry (same email)
INSERT INTO Doctor (name, specialization, email)
VALUES ('Duplicate Doc', 'Fake', 'priya.singh@hospital.com');

-- Rollback everything
ROLLBACK;

SELECT * FROM Patient;
SELECT * FROM Appointment;
SELECT * FROM Doctor;
SELECT * FROM Feedback;
